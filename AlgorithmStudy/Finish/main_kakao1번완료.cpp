//! 출력 사용
#include <iostream>

//! 문자열 사용
#include "string"
//! 문자열 함수 사용
#include "string.h"

#include "algorithm"

//! 백터 사용
#include <vector>

using namespace std;

/*

https://www.welcomekakao.com/tryouts/16422/challenges

*/



char TransId(char chT)
{
	if (chT >= 'A' && chT <= 'Z')
		chT = chT - ('A' - 'a');

	return chT;
}

void RemoveChar(string& strInput, string strFilter)
{
	for (size_t i = 0; i < strFilter.size(); i++)
	{
		strInput.erase(remove(strInput.begin(), strInput.end(), strFilter[i]), strInput.end());
	}
}

void DeleteSideChar(string& strInput, string strSide)
{
	if (strInput.size() == 0)
		return;

	int nFind = strInput.find(".");
	if (nFind == 0)
		strInput.erase(0, 1);

	if (strInput.size() == 0)
		return;

	nFind = strInput.rfind(".");
	if (nFind == strInput.size() - 1)
		strInput.erase(nFind, 1);
}

//no	new_id							result
//예1	"...!@BaT#*..y.abcdefghijklm"	"bat.y.abcdefghi"
//예2	"z-+.^."						"z--"
//예3	"=.="							"aaa"
//예4	"123_.def"						"123_.def"
//예5	"abcdefghijklmn.p"				"abcdefghijklmn"


int main()
{
	vector<string> phone_book;

	string new_id = "123_.def";
	string answer = "";

	//! 1단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다.
	transform(new_id.begin(), new_id.end(), new_id.begin(), TransId);

	//! 2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.
	string strFilterT = "";
	for (size_t i = 33; i < 126; i++)
	{
		if (i == '-' || i == '_' || i == '.' 
			|| (i >= 'a' && i <= 'z')
			|| (i >= '0' && i <= '9'))
			continue;
		strFilterT += char(i);
	}

	//strFilter = "-_.~!@#$%^&*()=+[{]}:?,<>";
	string strFilter = "~!@#$%^&*()=+[{]}:?,<> ";
	RemoveChar(new_id, strFilter);
	

	//! 3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.
	string strFilter2 = "..";
	int nFind = new_id.find(strFilter2);
	while (nFind >= 0)
	{
		new_id.replace(nFind, strFilter2.size(), ".");
		nFind = new_id.find("..");
	}

	//! 4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.
	DeleteSideChar(new_id, ".");

	//! 5단계 new_id가 빈 문자열이라면, new_id에 "a"를 대입합니다.
	if (new_id.size() == 0)
		new_id = "a";
	

	//! 6단계 new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.
	if (new_id.size() >= 16)
		new_id.erase(new_id.begin() + 15, new_id.end());
	
	//! 만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.
	DeleteSideChar(new_id, ".");
	


	//! 7단계 new_id의 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다.
	while (new_id.size() <= 2)
		new_id += new_id[new_id.size() - 1];
	

	answer = new_id;

	return 0;
}

